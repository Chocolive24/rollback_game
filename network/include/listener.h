#pragma once

#include "network_interface.h"

#include <LoadBalancing-cpp/inc/Listener.h>

/**
 * \brief The Listener class handles events and callbacks from the network
 * client.
 *
 * This class serves as a listener for events and callbacks generated by the
 * network client. It inherits from the Photon Realtime SDK's Listener class and
 * implements various callback methods to handle different types of events, such
 * as connection status changes, room events, and custom events.
 *
 * The Listener class is responsible for receiving and processing events from
 * the network client and forwarding relevant information to the application
 * logic through the NetworkInterface interface. This decouples the network
 * communication logic from the application logic, allowing for flexibility and
 * extensibility in handling network events.
 */
class Listener final : public ExitGames::LoadBalancing::Listener {
 public:
  explicit Listener(NetworkInterface* network) noexcept;

  void debugReturn(int debugLevel,
                   const ExitGames::Common::JString& string) override;

  void connectionErrorReturn(int errorCode) override;
  void clientErrorReturn(int errorCode) override;
  void warningReturn(int warningCode) override;
  void serverErrorReturn(int errorCode) override;

  void joinRoomEventAction(int playerNr, 
      const ExitGames::Common::JVector<int>& playernrs,
      const ExitGames::LoadBalancing::Player& player) override;

  void leaveRoomEventAction(int playerNr, bool isInactive) override;

  void customEventAction(int playerNr, nByte eventCode,
    const ExitGames::Common::Object& eventContent) override;

  void connectReturn(int errorCode,
                     const ExitGames::Common::JString& errorString,
                     const ExitGames::Common::JString& region,
                     const ExitGames::Common::JString& cluster) override;

  void disconnectReturn() override;

  void leaveRoomReturn(int errorCode,
                       const ExitGames::Common::JString& errorString) override;

 private:
  NetworkInterface* network_ = nullptr;
};